var ds,
	dnet,
	fs,
	path;
	
(function(){
	var isclient=1;
	if (typeof exports !== 'undefined') {
		fs=require('fs')		
		path=require('path')
	}
	ds={
		name: 'ds',
		stores:{},
		conds: {
			'==': function(v1,v2){
				if (v1==v2) return true;
				return false;
			},
			'!=': function(v1,v2){
				if (v1!=v2) return true;
				return false;
			},
			'<': function(v1,v2){
				if (v1<v2) return true;
				return false;
			},
			'>': function(v1,v2){
				if (v1>v2) return true;
				return false;
			}
		},
		dirname: '',
		mkdir: function(cpath,callback){
			fs.exists(cpath,function(exists){
				if(!exists){
					fs.mkdir(cpath);
				}
				callback(exists);
			})			
		},
		rmdir: function(cpath,callback,onlyfiles){
			onlyfiles=onlyfiles || 0;
			var err;
			fs.readdir(cpath,function(err,files){
				err=err;
				for(var nr in files){
					spath=path.resolve(cpath+'/'+files[nr])					
					var stats=fs.statSync(spath);
					if (stats.isFile()) {
						fs.unlink(spath, function(err) {
							if (err) console.log('ERR:',err);
						});	
						
						err=err;
					} else {
						ds.rmdir(spath,function(err){});
						err=err;
					}						
				}
			})
			if (!onlyfiles) fs.rmdir(cpath,function(err){});
			if (callback) callback(err)
		},
		handler: function(pack,callback){			
			var data=0,
				s=pack.path.split('/'),
				c=pack.com,
				a=pack.args || ''
			if (s.length==1){
				if (c=='add'){
					var cpath=path.resolve(ds.dirname+'/'+s.join('/'),a)
					ds.mkdir(cpath,function(err){	
						data='added store'
						if (callback) callback(data)
					})
				} 
				else if (c=='get'){					
					var cpath=path.resolve(ds.dirname+'/ds')
					fs.readdir(cpath,function(err,files){
						data=JSON.stringify(files)
						data=files
						if (callback) callback(data)
					})							
				} 
				else if (c=='rem'){
					ajaxres=1
					var cpath=path.resolve(ds.dirname+'/ds/'+a)
					ds.rmdir(cpath,function(err){
						data='removed store: '+pack.args;	
						if (callback) callback(data)
					})							
				}
			} 
			else if (s.length==2){
				if (c=='add'){
					var cpath=path.resolve(ds.dirname+'/'+s.join('/'),a)
					ds.mkdir(cpath,function(err){	
						data='added set: '+pack.args
						if (callback) callback(data)
					})					
				} 
				else if (c=='get'){					
					var cpath=path.resolve(ds.dirname+'/'+s.join('/'))
					fs.readdir(cpath,function(err,files){
						data=files
						if (callback) callback(data)
					})							
				} 
				else if (c=='rem'){
					var cpath=path.resolve(ds.dirname+'/'+s.join('/'),a)
					ds.rmdir(cpath,function(err){
						res.writeHead(200);
						data='removed set: '+pack.args
						if (callback) callback(data)
					})					
				}		
			}
			else if (s.length==3){
				if (c=='add'){
					ajaxres=1
					var cpath=path.resolve(ds.dirname+'/'+s.join('/'))
					ds.mkdir(cpath,function(err){													
						var item=a,
							ext=item.ext || '.json',
							fpath=path.resolve(cpath,item.id+ext);
							
						fs.writeFile(fpath,JSON.stringify(a),function(err){
							data='added item: '+pack.args
							if (callback) callback(data)
						})
					})		
				} 
				else if (c=='get' || c=='rem'){
					var get=1;
					if(c=='rem') get=0;
					if (a==''){	
						var cpath=path.resolve(ds.dirname+'/'+s.join('/'))
						fs.readdir(cpath,function(err,files){
							if (get) {
								data=[]
								var dat,
									pat;
								for(var nr in files){
									pat=path.resolve(cpath+'/'+files[nr])
									dat=fs.readFileSync(pat,'utf-8')
									data.push(dat)
								}
								if (callback) callback(data)
								
							} else {
								ds.rmdir(cpath,0,1)
								data='rem all items'
								if (callback) callback(data)
							}							
						})								
					} else {
						//solve cond
						var cond='';
						for(cond in ds.conds){
							if(a.indexOf(cond)!=-1) break;
							cond=''
						}
						if (!cond){//get item by id	
							var cpath=path.resolve(ds.dirname+'/'+s.join('/'),a+'.json')
							fs.exists(cpath,function(exists){
								if(exists){
									//get
									if (get){
										fs.readFile(cpath, 'utf-8',function (err, fdata) {
											if (err) {
												throw err
											} else {
												data=fdata
												if (callback) callback(data)
											};
											
										});
									} else {
										fs.unlink(cpath, function(err) {
											if (err) console.log('ERR:',err);											
											data='removed item: '+pack.args;
											if (callback) callback(data)
										});																		
									}
								} else {									
									data='item not found:'+pack.args;
									if (callback) callback(data)
								}
							})								
						} 
						else {
							var cpath=path.resolve(ds.dirname+'/'+s.join('/')),
								fpath,
								stats,
								fdata='',
								fdat='',
								fobj,
								attr,
								val;
							val=a.split(cond);
							attr=val[0]
							val=val[1]
							fs.readdir(cpath,function(err,files){
								for(var nr in files){
									fpath=path.resolve(ds.dirname+'/'+s.join('/'),files[nr])									
									stats=fs.statSync(fpath);
									if (stats.isFile()) {
										fdat=fs.readFileSync(fpath)					
										fobj=JSON.parse(fdat)	
										if(ds.conds[cond](fobj[attr],val)) {
											//get
											if (get){
												fdata+=fdat
											} else {
												fs.unlink(fpath, function(err) {
													if (err) console.log('ERR:',err);
												});												
											}
											
											//rem
											/*
											/**/
										}
									}																		
								}
								if(!get) fdata='removed items: '+a
								data=fdata
								if (callback) callback(data)
							})							
						}
					}
				} 
				else if (c=='rem'){
					if (a){
					} else {
						var cpath=path.resolve(ds.dirname+'/'+s.join('/'))
						ds.rmdir(cpath,0,1)
						data='rem all items2'
						if (callback) callback(data)
					}
					
				}		
			}			
			
		},
		genid: function(pre,after){
			pre=pre || '';
			after=after || '';
			var id=pre+(new Date().getTime()+after);
			return id;
		}	
	}
})()	
if (typeof exports !== 'undefined') {
	ds.dirname=process.cwd();
	for(var key in ds){
		exports[key]=ds[key];
	}
	
}
console.log('loaded ds');
